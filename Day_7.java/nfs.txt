/*
You are an explorer on the Mystic Isles, where you have discovered an ancient map leading to a hidden treasure. The map contains N marked locations, each with a certain amount of treasure. However, due to mystical energy fluctuations, you can only collect treasure from a sequence of exactly L consecutive locations at a time.

To claim a valid treasure haul, you must ensure that the treasures collected in that sequence are all distinct - if any treasure amount is repeated in the chosen sequence, the mystical forces nullify the collection.

Your goal is to determine the maximum possible sum of treasure that can be collected in a single valid haul. If no valid sequence of locations exists, return 0.

Input Format:
Line 1: Two space-separated integers, N (total number of treasure locations) and L (length of the sequence you must pick).

Line 2: N space-separated integers representing the treasure values at each location.

Output Format:
Print an integer representing the maximum valid treasure haul.


Sample Input-1:
---------------
7				//N (total number of treasure locations)
3				//L (length of the sequence you must pick)
7 7 7 1 5 4 2	//N space-separated integers representing the treasure values															at each location
Sample Output-1:
----------------
13

Explanation:
The possible sequences of length 3 from the treasure locations are:

[7,7,7]  Invalid (7 is repeated).
[7,7,1]  Invalid (7 is repeated).
[7,1,5]  Valid (All distinct, sum = 13).
[1,5,4]  Valid (All distinct, sum = 10).
[5,4,2]  Valid (All distinct, sum = 11).
The maximum valid treasure haul is 13.


Sample Input-2:
---------------
3 3
7 7 7

Sample Output-2:
----------------
0

*/

/*You are visiting a farm that has a single row of fruit trees arranged from left to right.
 The trees are represented by an integer array fruits where fruits[i] is the type of fruit the ith tree produces.
You want to collect as much fruit as possible. 

However, the owner has some strict rules that you must follow:
You only have two baskets, and each basket can only hold a single type of fruit. 
There is no limit on the amount of fruit each basket can hold.
Starting from any tree of your choice, you must pick exactly one fruit from every tree (including the start tree)
 while moving to the right. The picked fruits must fit in one of your baskets.
Once you reach a tree with fruit that cannot fit in your baskets, you must stop.
Given the integer array fruits, return the maximum number of fruits you can pick.

Sample cases:

case 1:
Input: 
3
1 2 1
Output: 3
Explanation: We can pick from all 3 trees.

Case  2:
Input: 
4
0 1 2 2 
Output: 3
Explanation: We can pick from trees [1,2,2].
If we had started at the first tree, we would only pick from trees [0,1].

case 3:
Input: 
5
1 2 3 2 2
Output: 4
Explanation: We can pick from trees [2,3,2,2].
If we had started at the first tree, we would only pick from trees [1,2].
*/

/* A bank's fraud detection system monitors recent transactions to identify suspicious duplicate payments. The system processes a list of N transactions, where each transaction has a unique ID.

To detect potential fraud, the system examines a sliding window of size X to check if any two transactions within that window have the same ID.

Your task is to determine whether any duplicate transaction IDs appear within any X-length window. If such a duplicate is found, return true; otherwise, return false.

Constraints:
X is always <= |i - j|, where i and j are distinct indices in the transaction list.
The transaction IDs are integers.

Example Test Cases:

Case 1 (Fraud Detected)
Input:  
10  
15 70 50 25 35 20 40 45 20 60  
4  

Output:  
true  
Explanation:
Within a window of size 4, the number 20 appears twice, indicating potential fraud.

Case 2 (No Fraud Detected)
Input:  
10  
15 70 50 25 35 20 40 45 30 60  
3  

Output:  
false  
Explanation:
No transaction ID is repeated within any 3-transaction window.
*/

/*
There is a Game where a fighter consumes power[i] on the i-th hour. 

Given an integer k, for every consecutive sequence of k hours (power[i], 
power[i+1], ..., power[i+k-1] for all 0 <= i <= n-k), they look at T, 
the total power consumed during that sequence of k hours (power[i] + 
power[i+1] + ... + power[i+k-1]):

If T < lower, fighter performed poorly and lose 1 point; 
If T > upper, fighter performed well and gain 1 point;
Otherwise, fighter performed normally and there is no change in points.

Initially, the fighter has zero points. Return the total number of points the 
fighter has after consuming power for power.length hours.

Note that the total points can be negative.

 
Input Format
--------------
Line-1: An integer N, the arrray length.
Line-2: Array of integers, power[]
Line-3: Three integers -subarray length K, lower value and upper value

output Format
--------------
An integer total points

Sample Input-1:
---------------
4
7 10 0 0
2 1 12

Sample Output-1:
----------------
0

Explanation:
------------
Since k = 2, we consider subarrays of length 2.
power[0] + power[1] > upper so 1 point is gained.
lower <= power[1] + power[2] <= upper so no change in points.
power[2] + power[3] < lower so 1 point is lost.


Sample Input-2:
2
5 10
2 0 1

Sample Output-2:
----------------
1

Explanation:
------------
Since k = 2, we consider subarrays of length 2.
power[0] + power[1] > upper so 1 point is gained.
Example 3:

Sample Input-3:
---------------
5
1 2 3 4 5
1 3 3

Sample Output-3:
----------------
0

Explanation:
------------
Since k = 1, Since k = 2, we consider subarrays of length 1. and compare it 
to lower and upper. power[0] and power[1] are less than lower so 2 points are lost. 
power[3] and power[4] are greater than upper so 2 points are gained.
*/

/*
A futuristic city runs on energy capsules, each containing a specific amount of power. The city's engineers are analyzing different ways to combine these capsules to power various devices. However, they need to ensure that the total energy used in any combination remains below a certain threshold, K, to prevent overload.

Your task is to determine how many possible continuous sequences of energy capsules can be selected where the total energy consumed is less than K.

Input Format:
The first line contains two space-separated integers, N (the number of energy capsules) and K (the maximum allowable energy limit).
The second line contains N space-separated integers, representing the energy stored in each capsule.
	 
Output Format:
Print the total number of valid sequences of energy capsules where the sum of energy is less than K.

Input:
5 8  
5 4 1 2 3  

Output:
10

*/

/*A scientist is studying a long DNA strand and wants to identify unique genetic markers. A marker is a "valid sequence" if it consists of exactly K bases and all K are distinct. Given a DNA strand, count how many such valid sequences appear. Every occurrence, even if repeated at different positions, must be counted.

Example 1:
input: s = "xyzzaz", k=3
output: 1

Explanation: There are 4 substrings of size 3: "xyz", "yzz", "zza", and "zaz". 
The only good substring of length 3 is "xyz".


Example 2:
Input: s = "aababcabc" k=4
Output: 0
Explanation: There are no substrings of size 4: "aaba", "abab", "babc", "abca", "bcab", and "cabc".


*/
